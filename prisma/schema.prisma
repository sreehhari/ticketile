// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String
  role     Role      @default(CONSUMER)
  theaters Theater[]
  bookings Booking[]
}

model Theater {
  id      Int            @id @default(autoincrement())
  name    String
  locatin String
  ownerId Int
  owner   User           @relation(fields: [ownerId], references: [id])
  movies  MovieTheater[]
}

model Movie {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  releaseDate DateTime
  posterUrl   String?
  theaters    MovieTheater[]
  bookings    Booking[]
  status      MovieStatus    @default(ACTIVE)
}

model MovieTheater {
  id        Int     @id @default(autoincrement())
  movie     Movie   @relation(fields: [movieId], references: [id])
  movieId   Int
  theater   Theater @relation(fields: [theaterId], references: [id])
  theaterId Int
  showTimes String //store showtimes in a format like json vro
}

model Booking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  bookedAt  DateTime @default(now())
  cancelled Boolean  @default(false)
}

enum Role {
  CONSUMER
  THEATER_OWNER
}

enum MovieStatus {
  ACTIVE
  REVOKED
}
